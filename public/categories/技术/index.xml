<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>技术 on LoveIt Theme</title>
    <link>https://blog.spencerwoo.com/categories/%E6%8A%80%E6%9C%AF/</link>
    <description>Recent content in 技术 on LoveIt Theme</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 22 Nov 2019 21:14:00 +0800</lastBuildDate>
    
	<atom:link href="https://blog.spencerwoo.com/categories/%E6%8A%80%E6%9C%AF/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Reverse Proxy | 反向代理是什么？</title>
      <link>https://blog.spencerwoo.com/2019/11/reverse-proxy/</link>
      <pubDate>Fri, 22 Nov 2019 21:14:00 +0800</pubDate>
      
      <guid>https://blog.spencerwoo.com/2019/11/reverse-proxy/</guid>
      <description>Tiny Tiny RSS | 最速部署私有 RSS 服务器 这篇文章里面，我们提到了「利用 Nginx 作为反向代理」来为 Tiny Tiny RSS 服务加上 SSL 支持。事实上，我经常都能在各个和 Nginx、Apache Server 等相关文档里面看到「反向代理」这个术语。今天我们就来看看，到底什么是反向代理？「反向代理」的工作原理，以及我们都可以用「反向代理」来干什么？
Proxy：什么是代理？ 首先，反向代理（Reverse Proxy）是一种代理（Proxy）服务。为了搞清楚「反向代理」，我们首先来说一说「代理 - Proxy」。
相信阅读这篇文章的同学一定对 Proxy 这个名词不陌生，Mainland China 互联网现状让大部分同学的计算机网络知识突飞猛进😂。简单来说，Proxy 服务器的主要功能就是在客户端 Client 和服务端 Server 之间搭建一个桥梁，从客户端访问服务端的网络流量、以及从服务端返回客户端的网络流量都会经由这一 Proxy 服务器的转发。1
为了方便表述，我们就叫我们的 Proxy 服务器：咕咕，一只鸽子。🐦
正向代理和反向代理 Forward Proxy：正向代理 飞鸽传书嘛，信鸽主要功能就是通风报信，我们这里的咕咕也不例外。咕咕在正常情况下是我们自己（客户端）的，也就意味着：咕咕会在 Client 前面等待送信。当 Client 准备发送一个请求的时候，咕咕会拿着这个请求，在公共互联网上面，将请求准确送达至对应的 Server。同理，Server 返回 response 给 Client，response 也会先被咕咕拿到，之后再转交给 Client。
上面就是「正向代理」的基本工作流程，咕咕就是我们这个例子里面的正向代理服务器，负责转发和接受从 Client 发出或收到的网络请求。我们用正向代理（Forward Proxy），除了大家人尽皆知的目的以外😂，还可以：
 有效屏蔽广告、追踪脚本等有害请求。咕咕可以选择性的将 Server 发来的内容进行屏蔽，也就是：咕咕知道这次发来的是个广告，不给我们看也无妨大碍，那为了让我们浏览体验更加纯净，咕咕就非常体贴的丢掉了这一广告。爱了 ❤️ 2 有效的隐藏我们的身份。因为咕咕在你没有用到它的时候，可以并行的为其他同学传递请求。这时候，Server 是无从知道请求的真正来源的，只知道是由咕咕转手的，从而保证我们身份匿名性。  Reverse Proxy：反向代理 那么反向代理是怎样工作的呢？在反向代理中，我们的咕咕现在由服务器 Server 养活（部署），也就是说，咕咕在服务器端通风报信。每个从 Client 经由互联网发过来的请求会先到达咕咕这里，咕咕再将每个请求分发给相应的服务器。反之亦然。这就是「反向代理」的基本工作原理，我们在这个例子里面的「咕咕」，就是我们的反向代理服务器。（Reverse Proxy Server）</description>
    </item>
    
    <item>
      <title>Batch Git Pull：分享一个维护多个 Git 仓库的小脚本</title>
      <link>https://blog.spencerwoo.com/2019/11/batch-git-pull/</link>
      <pubDate>Wed, 13 Nov 2019 03:29:53 +0000</pubDate>
      
      <guid>https://blog.spencerwoo.com/2019/11/batch-git-pull/</guid>
      <description>不废话，放脚本：
1  find . -maxdepth 3 -name .git -type d | rev | cut -c 6- | rev | xargs -I {} git -C {} pull   更为方便的，直接将这部分加入你的 .zshrc 或者 .bash_profile：
1  alias gpall=&amp;#34;find . -maxdepth 3 -name .git -type d | rev | cut -c 6- | rev | xargs -I {} git -C {} pull&amp;#34;   之后，直接执行 gpall 即可。
好了，我们进入正题。
维护多个 Git 仓库的需求 维护多个 Git 仓库不容易。我在我存放 GitHub 仓库的目录下运行了一下 tree：</description>
    </item>
    
  </channel>
</rss>